---
import DefaultLayout from '../layouts/DefaultLayout.astro';
import { colorPalettes, paletteHues } from '@assets/scss/base/color-palettes';
---

<DefaultLayout title="Accessible Components">
  <section class="my-12">
    <div class="space-content container">
      <h1>Find your Colour palette</h1>
      <p class="text-2xl">Design your own colour scheme with eighteen carefully selected hues.</p>
    </div>
  </section>
  <section class="mb-12 mt-32">
    <div class="color-grid w-full">
      {
        Array(18)
          .fill(null)
          .map((_, hueIndex) => {
            return (
              <button type="button" class="grid-row" data-id="grid-button">
                {Array(13)
                  .fill(null)
                  .map((_, valueIndex) => (
                    // @ts-expect-error indexing by valueIndex is correct
                    <div
                      class="grid-item"
                      data-hue={paletteHues[hueIndex]}
                      data-hue-value={colorPalettes[paletteHues[hueIndex]!][valueIndex]}
                    >
                      <p class="color-description">
                        {paletteHues[hueIndex]}
                        <br />
                        {
                          // @ts-expect-error indexing by valueIndex is correct
                          colorPalettes[paletteHues[hueIndex]!][valueIndex]
                        }
                      </p>
                    </div>
                  ))}
              </button>
            );
          })
      }
    </div>
  </section>
</DefaultLayout>

<script>
  import { colorPalettes, paletteHues } from '@assets/scss/base/color-palettes';

  let hueButtons = document.querySelectorAll<HTMLButtonElement>("button[data-id='grid-button']");

  function setThemeProperties(hue: keyof typeof colorPalettes, isPrimary = true) {
    const propertyName = isPrimary ? 'primary' : 'secondary';

    for (let i = 0; i <= 12; i++) {
      // @ts-expect-error i is correct hue index
      localStorage.setItem(`--${propertyName}-${i}`, colorPalettes[hue][i]);
      // @ts-expect-error i is correct hue index
      document.documentElement.style.setProperty(`--${propertyName}-${i}`, colorPalettes[hue][i]);
    }
  }

  function setRootThemeProperties() {
    for (let i = 0; i <= 12; i++) {
      const storePrimaryProperty = localStorage.getItem(`--primary-${i}`);
      const storeSecondaryProperty = localStorage.getItem(`--secondary-${i}`);

      if (storePrimaryProperty) {
        document.documentElement.style.setProperty(`--primary-${i}`, storePrimaryProperty);
      }
      if (storeSecondaryProperty) {
        document.documentElement.style.setProperty(`--secondary-${i}`, storeSecondaryProperty);
      }
    }
  }

  hueButtons.forEach((button, index) => {
    const hue = paletteHues[index];
    if (!hue) return;
    button.addEventListener('click', () => {
      setThemeProperties(hue);
    });
  });

  document.addEventListener('astro:after-swap', () => {
    setRootThemeProperties();
    hueButtons = document.querySelectorAll<HTMLButtonElement>("button[data-id='grid-button']");

    hueButtons.forEach((button, index) => {
      const hue = paletteHues[index];
      if (!hue) return;
      button.addEventListener('click', () => {
        setThemeProperties(hue);
      });
    });
  });
</script>

<style lang="scss">
  @use '../assets/scss/base/color-palettes' as *;

  .color-grid {
    display: flex;
    flex-direction: column;
    gap: 0.25rem;

    .grid-row {
      border: none;
      display: flex;
      width: 100%;
    }

    .grid-item {
      flex-grow: 1;
      aspect-ratio: 1;
      position: relative;

      p {
        position: absolute;
        top: 50%;
        left: 50%;
        transform: translate(-50%, -50%);
      }
      @media only screen and (max-width: 1200px) {
        .color-description {
          display: none;
        }
      }
    }

    .grid-item:nth-child(n + 6) {
      color: white;
    }

    @each $color, $shades in $palettes {
      $i: index(($palettes), ($color $shades));
      @for $j from 0 through 13 {
        .grid-row:nth-child(#{$i}) .grid-item:nth-child(#{$j}) {
          background-color: var(--clr-#{$color}-#{$j - 1});
          // set dark text for lightest colors
          color: var(--clr-#{$color}-#{if($j < 5, 12, 0)});
        }
      }
    }
  }
</style>
 @assets/scss/base/color-palettes
